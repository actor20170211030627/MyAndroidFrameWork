package com.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.actor.sample.database.ItemEntity;
import com.actor.sample.database.MapConverter;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

import java.util.Map;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ITEM_ENTITY".
*/
public class ItemEntityDao extends AbstractDao<ItemEntity, Long> {

    public static final String TABLENAME = "ITEM_ENTITY";

    /**
     * Properties of entity ItemEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property IdCard = new Property(2, String.class, "idCard", false, "ID_CARD");
        public final static Property Time = new Property(3, java.util.Date.class, "time", false, "TIME");
        public final static Property Sex = new Property(4, int.class, "sex", false, "SEX");
        public final static Property Params = new Property(5, String.class, "params", false, "PARAMS");
    }

    private final MapConverter paramsConverter = new MapConverter();

    public ItemEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ItemEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ITEM_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"ID_CARD\" TEXT NOT NULL UNIQUE ," + // 2: idCard
                "\"TIME\" INTEGER," + // 3: time
                "\"SEX\" INTEGER NOT NULL ," + // 4: sex
                "\"PARAMS\" TEXT);"); // 5: params
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ITEM_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ItemEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindString(3, entity.getIdCard());
 
        java.util.Date time = entity.getTime();
        if (time != null) {
            stmt.bindLong(4, time.getTime());
        }
        stmt.bindLong(5, entity.getSex());
 
        Map params = entity.getParams();
        if (params != null) {
            stmt.bindString(6, paramsConverter.convertToDatabaseValue(params));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ItemEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindString(3, entity.getIdCard());
 
        java.util.Date time = entity.getTime();
        if (time != null) {
            stmt.bindLong(4, time.getTime());
        }
        stmt.bindLong(5, entity.getSex());
 
        Map params = entity.getParams();
        if (params != null) {
            stmt.bindString(6, paramsConverter.convertToDatabaseValue(params));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ItemEntity readEntity(Cursor cursor, int offset) {
        ItemEntity entity = new ItemEntity();
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ItemEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIdCard(cursor.getString(offset + 2));
        entity.setTime(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setSex(cursor.getInt(offset + 4));
        entity.setParams(cursor.isNull(offset + 5) ? null : paramsConverter.convertToEntityProperty(cursor.getString(offset + 5)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ItemEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ItemEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ItemEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
